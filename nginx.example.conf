upstream gunicorn_example.com {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).
 
    server unix:/srv/example.com/virtualenv/run/gunicorn.sock fail_timeout=0;
}
 
server {
    listen 80;
    listen 443 ssl;
    listen [::]:80;
    listen [::]:443 ssl;

    server_name example.com;

    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
#    ssl_stapling on;
#    ssl_stapling_verify on;

    client_max_body_size 4G;

    access_log /srv/example.com/logs/nginx-access.log;
    error_log /srv/example.com/logs/nginx-error.log;

    location /.well-known/ {
        alias /srv/example.com/htdocs/.well-known/;
    }

    location /static/ {
        alias /srv/example.com/virtualenv/website/static/;
    }

    location /media/ {
        alias /srv/example.com/virtualenv/website/media/;
    }

    # Handy for what-is-my-ip
    location /ip/ {
        default_type text/plain;
        echo $remote_addr;
    }

    location /useragent/ {
        default_type text/plain;
        echo $http_user_agent;
    }

    location /.well-known/acme-challenge {
        alias /srv/http/.well-known/acme-challenge;
        autoindex on;
    }

    location / {
        # HSTS
        add_header Strict-Transport-Security "max-age=86400";

        # an HTTP header important enough to have its own Wikipedia entry:
        # http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;
        
        proxy_set_header X-Forwarded-Is-Https $https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff. It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://gunicorn_example.com;
            break;
        }
    }

    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /srv/example.com/virtualenv/website/static/;
    }
}
